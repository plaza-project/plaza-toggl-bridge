#!/usr/bin/env python3

import logging
import sys
import json
import os
import traceback

from plaza_bridge import (
    PlazaBridge,
    FormBasedServiceRegistration,
    BlockArgument,
    CollectionBlockArgument,
)
from toggl.TogglPy import Toggl

from plaza_toggl_service import (
    config,
    storage,
    assets,
)

IS_PUBLIC = os.getenv('TOGGL_PUBLIC_BRIDGE', '0') in ('1', 't', 'true')

class Registerer(FormBasedServiceRegistration):
    def __init__(self, *args, **kwargs):
        FormBasedServiceRegistration.__init__(self, *args, **kwargs)

    def get_call_to_action_text(self, extra_data):
        return """
        Introduce access data for toggl:

        Access token:    <input name="token" type="text" placeholder="Generated access token">

        See <a href="https://www.toggl.com/app/profile">your toggl profile page</a> to get an access token
        """

    def register(self, data, extra_data):
        print(
            "User {} is registered with: {}".format(
                extra_data.user_id, json.dumps(data["form"], indent=4)
            )
        )

        plaza_user_id = extra_data.user_id
        token = data["form"]["token"]

        toggl = Toggl()
        toggl.setAPIKey(token)

        user_info = toggl.request("https://www.toggl.com/api/v8/me")
        user_id = user_info['data']['id']
        username = user_info['data']['email']

        STORAGE.register_user(
            {
                "user_id": user_id,
                "token": token,
                "username": username,
            },
            plaza_user_id,
        )

        return True



bridge = PlazaBridge(name="Toggl",
                     is_public=IS_PUBLIC,
                     icon=assets.open_icon(),
                     endpoint=config.get_bridge_endpoint(),
                     token=config.get_auth_token(),
                     collections=['workspaces'],
                     allow_multiple_connections=False)

registerer = Registerer(bridge=bridge)
bridge.registerer = registerer

STORAGE = storage.get_engine()
WORKSPACE_COLLECTION = bridge.collections.workspaces

@WORKSPACE_COLLECTION.getter
def get_workspaces(user_id, extra_data):
    results = {}
    for user in STORAGE.get_toggl_users_from_plaza_id(extra_data.user_id):
        toggl = Toggl()
        toggl.setAPIKey(user["token"])

        for workspace in toggl.getWorkspaces():
            results[str(user["user_id"]) + "/" + str(workspace["id"])] = {
                "name": workspace["name"]
            }

    return results


@bridge.operation(id='stop_counter',
                  message="Stop Toggl counter on %1",
                  arguments=[
                      CollectionBlockArgument(WORKSPACE_COLLECTION),
                  ])
def stop_counter(user_workspace_id, _extra_data):
    user_id, _workspace_id = user_workspace_id.split('/', 1)
    user = STORAGE.get_toggl_user_from_id(user_id)
    toggl = Toggl()
    toggl.setAPIKey(user["token"])
    current_time_entry = toggl.currentRunningTimeEntry()
    if current_time_entry is None or current_time_entry.get('data', None) is None:
        return False
    toggl.stopTimeEntry(current_time_entry['data']['id'])
    return True


@bridge.operation(id="start_counter",
                  message="Start toggl counter on %1 with description: %2",
                  arguments=[
                      CollectionBlockArgument(WORKSPACE_COLLECTION),
                      BlockArgument(str, "Task name"),
                  ])
def start_counter(user_workspace_id, description, _extra_data):
    user_id, _workspace_id = user_workspace_id.split('/', 1)
    user = STORAGE.get_toggl_user_from_id(user_id)
    toggl = Toggl()
    toggl.setAPIKey(user["token"])
    toggl.startTimeEntry(description)

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(levelname)s [%(filename)s] %(message)s")
    logging.getLogger().setLevel(logging.INFO)

    try:
        bridge.run()
    except Exception:
        traceback.print_exc()
        os._exit(1)

    os._exit(0)  # Force stopping after the bridge ends
